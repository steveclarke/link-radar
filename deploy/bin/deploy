#!/usr/bin/env bash
set -euo pipefail

################################################################################
# Link Radar Deployment Script
################################################################################
#
# OVERVIEW
# --------
# Automated deployment of Link Radar to remote servers via SSH. Supports
# multiple environments (prod, staging, test, etc.) with state tracking for
# truly idempotent deploys.
#
# MODES
# -----
# Install Mode (DEPLOYED=false):
#   - Full deployment setup
#   - Generates environment files
#   - Starts services
#   - Marks as deployed
#
# Update Mode (DEPLOYED=true):
#   - Pulls latest code and images
#   - Restarts services
#   - Preserves existing configuration
#
# CONFIGURATION
# -------------
# Environment config file: .config/{ENVIRONMENT}.env
#
# Required fields:
#   DEPLOY_HOST           Server hostname or IP
#   ONEPASSWORD_ITEM_ID   1Password item ID for credentials
#   DEPLOYED              false (first deploy) or true (updates)
#
# CREDENTIALS
# -----------
# Auto-sourced from 1Password (primary method):
#   - username (defaults to "deploy")
#   - Database Password (only for first deploy)
#   - API Key (preserved across updates)
#   - Rails Master Key (from local backend/config/master.key)
#
# USAGE
# -----
#   bin/deploy prod              Deploy to production
#   bin/deploy staging           Deploy to staging
#   bin/deploy test --check      Check prerequisites only
#
################################################################################

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

################################################################################
# Helper Functions
################################################################################

log() { echo -e "${GREEN}==>${NC} ${1}"; }
info() { echo -e "${BLUE}Info:${NC} ${1}"; }
warn() { echo -e "${YELLOW}Warning:${NC} ${1}"; }
error() { echo -e "${RED}Error:${NC} ${1}" >&2; exit 1; }

usage() {
  cat << EOF
Usage: bin/deploy ENVIRONMENT [OPTIONS]

Automated deployment of Link Radar to a remote server.

Arguments:
  ENVIRONMENT          Environment name (required: prod, staging, test, etc.)
                      Loads .config/ENVIRONMENT.env

Configuration File (.config/ENV.env):
  DEPLOY_HOST           Server hostname or IP
  ONEPASSWORD_ITEM_ID   1Password item ID containing credentials
  DEPLOYED              State tracking (false=install, true=update)

Options:
  -h, --help          Show this help message
  -c, --check         Check prerequisites only, don't deploy

Examples:
  bin/deploy prod               # Deploy to production
  bin/deploy staging            # Deploy to staging
  bin/deploy test --check       # Check prerequisites for custom environment

EOF
  exit 0
}

################################################################################
# Configuration Functions
################################################################################

parse_arguments() {
  # Parse environment argument (required)
  if [ "${1:-}" == "-h" ] || [ "${1:-}" == "--help" ] || [ -z "${1:-}" ]; then
    usage
  fi

  DEPLOY_ENV="$1"
  shift

  # Parse remaining arguments
  CHECK_ONLY=false
  while [[ $# -gt 0 ]]; do
    case $1 in
      -h|--help) usage ;;
      -c|--check) CHECK_ONLY=true; shift ;;
      *) error "Unknown option: $1" ;;
    esac
  done
}

load_environment_config() {
  CONFIG_FILE="$(dirname "$0")/../.config/${DEPLOY_ENV}.env"

  if [ ! -f "$CONFIG_FILE" ]; then
    error "Config not found: .config/${DEPLOY_ENV}.env

Create from template:
  cp .config/environment.env.template .config/${DEPLOY_ENV}.env"
  fi

  source "$CONFIG_FILE"
  info "Environment: ${DEPLOY_ENV}"

  # Set defaults
  DEPLOYED="${DEPLOYED:-false}"
  export DEPLOY_USER="${DEPLOY_USER:-deploy}"
  BACKEND_IMAGE="${BACKEND_IMAGE:-ghcr.io/steveclarke/lr-backend:latest}"
  BACKEND_PORT="${BACKEND_PORT:-3000}"
}

load_credentials() {
  # Warn if 1Password CLI is not available but config expects it
  if [ -n "${ONEPASSWORD_ITEM_ID:-}" ] && ! command -v op &> /dev/null; then
    warn "1Password CLI not found - install it or set credentials via environment variables"
    warn "Install: https://developer.1password.com/docs/cli/get-started/"
  fi

  # Auto-fetch credentials from 1Password
  if command -v op &> /dev/null && [ -n "${ONEPASSWORD_ITEM_ID:-}" ]; then
    if op item get "$ONEPASSWORD_ITEM_ID" &> /dev/null 2>&1; then
      info "Loading credentials from 1Password..."

      export DEPLOY_USER="${DEPLOY_USER:-$(op item get "$ONEPASSWORD_ITEM_ID" --fields label="username" 2>/dev/null || echo "deploy")}"
      export RAILS_MASTER_KEY="${RAILS_MASTER_KEY:-$(cat "$(dirname "$0")/../../backend/config/master.key" 2>/dev/null || echo "")}"
      export DB_PASSWORD="${DB_PASSWORD:-$(op item get "$ONEPASSWORD_ITEM_ID" --fields label="Database Password" --reveal 2>/dev/null || echo "")}"

      log "Credentials loaded from 1Password"
    fi
  fi
}

################################################################################
# Validation Functions
################################################################################

check_prerequisites() {
  log "Checking prerequisites..."

  # Required variables
  [[ -z "${DEPLOY_HOST:-}" ]] && error "DEPLOY_HOST not set"
  [[ -z "${RAILS_MASTER_KEY:-}" ]] && error "RAILS_MASTER_KEY not set"

  info "Deploy host: ${DEPLOY_HOST}"
  info "Deploy user: ${DEPLOY_USER}"
  info "Backend image: ${BACKEND_IMAGE}"
  info "Mode: $([ "$DEPLOYED" == "true" ] && echo "UPDATE" || echo "INSTALL")"

  test_ssh_connection
  check_database_password_requirement

  if [ "$CHECK_ONLY" = true ]; then
    log "Prerequisites check passed!"
    exit 0
  fi
}

test_ssh_connection() {
  log "Testing SSH connection..."
  if ! ssh -o ConnectTimeout=5 -o BatchMode=yes "${DEPLOY_USER}@${DEPLOY_HOST}" "echo 'SSH OK'" &>/dev/null; then
    error "Cannot connect to ${DEPLOY_USER}@${DEPLOY_HOST}. Check SSH access."
  fi
  log "SSH connection successful"
}

check_database_password_requirement() {
  # Only check if in install mode
  if [ "$DEPLOYED" != "true" ]; then
    if ssh "${DEPLOY_USER}@${DEPLOY_HOST}" "docker volume ls 2>/dev/null | grep -q postgres_data" 2>/dev/null; then
      info "PostgreSQL volume exists, skipping DB_PASSWORD requirement"
    else
      info "First deploy detected, DB_PASSWORD required"
      if [ -z "${DB_PASSWORD:-}" ]; then
        DB_PASSWORD=$(openssl rand -base64 32)
        warn "Generated new DB_PASSWORD - save to 1Password!"
        echo ""
        echo "  Database Password: $DB_PASSWORD"
        echo ""
        warn "Add this to your 1Password item: $ONEPASSWORD_ITEM_ID"
      fi
    fi
  fi
}

################################################################################
# Install Mode Functions
################################################################################

install_deployment() {
  log "Starting full installation to ${DEPLOY_HOST}..."
  echo ""

  setup_deploy_directory
  run_setup_script
  generate_env_files
  pull_images
  start_services
}

setup_deploy_directory() {
  log "Setting up deploy directory on server..."
  ssh "${DEPLOY_USER}@${DEPLOY_HOST}" bash << 'ENDSSH'
set -e
mkdir -p ~/docker
cd ~/docker

# Clone if not exists, otherwise update
if [ ! -d "link-radar" ]; then
  echo "Cloning repository..."
  git clone --filter=blob:none --sparse https://github.com/steveclarke/link-radar.git
  cd link-radar
  git sparse-checkout set --no-cone deploy/
else
  echo "Updating existing repository..."
  cd link-radar
  git fetch origin
  git reset --hard origin/master
fi

cd deploy
echo "Deploy directory ready: $(pwd)"
ENDSSH

  log "Deploy directory ready"
}

run_setup_script() {
  log "Running setup script..."
  ssh "${DEPLOY_USER}@${DEPLOY_HOST}" bash << 'ENDSSH'
cd ~/docker/link-radar/deploy
./bin/setup
ENDSSH

  log "Setup complete"
}

generate_env_files() {
  log "Generating environment files..."

  # Create .env
  ssh "${DEPLOY_USER}@${DEPLOY_HOST}" "cat > ~/docker/link-radar/deploy/.env" << EOF
# Link Radar Production Deployment Configuration
# Generated by automated deployment script

# Backend Docker Image
BACKEND_IMAGE=${BACKEND_IMAGE}

# Backend Port (external port mapping)
BACKEND_PORT=${BACKEND_PORT}
EOF

  # Get API key (1Password → existing → generate)
  get_api_key

  # URL-encode the password for use in DATABASE_URL
  DB_PASSWORD_ENCODED=$(printf '%s' "${DB_PASSWORD}" | jq -sRr @uri)

  # Create backend.env
  ssh "${DEPLOY_USER}@${DEPLOY_HOST}" "cat > ~/docker/link-radar/deploy/env/backend.env" << EOF
# Link Radar Backend Configuration
# Generated by automated deployment script

# Rails Environment
RAILS_ENV=production
RAILS_LOG_LEVEL=info
RAILS_SERVE_STATIC_FILES=true

# Rails Master Key
RAILS_MASTER_KEY=${RAILS_MASTER_KEY}

# Database Configuration
DATABASE_URL=postgresql://linkradar:${DB_PASSWORD_ENCODED}@postgres:5432/linkradar_production

# Redis Configuration
REDIS_URL=redis://redis:6379/0

# API Authentication
CORE_API_KEY=${API_KEY}

# Optional: Database connection pool size
RAILS_MAX_THREADS=5
EOF

  # Create postgres.env
  ssh "${DEPLOY_USER}@${DEPLOY_HOST}" "cat > ~/docker/link-radar/deploy/env/postgres.env" << EOF
# PostgreSQL Database Configuration
# Generated by automated deployment script

POSTGRES_USER=linkradar
POSTGRES_PASSWORD=${DB_PASSWORD}
POSTGRES_DB=linkradar_production
EOF

  log "Environment files generated"
}

get_api_key() {
  # Try 1Password first
  if [ -n "${ONEPASSWORD_ITEM_ID:-}" ] && command -v op &> /dev/null; then
    API_KEY=$(op item get "$ONEPASSWORD_ITEM_ID" --fields label="API Key" --reveal 2>/dev/null || echo "")
    if [ -n "$API_KEY" ]; then
      info "API key loaded from 1Password"
      return
    fi
  fi

  # Try to preserve existing from server
  API_KEY=$(ssh "${DEPLOY_USER}@${DEPLOY_HOST}" "grep CORE_API_KEY ~/docker/link-radar/deploy/env/backend.env 2>/dev/null | cut -d= -f2" || echo "")
  if [ -n "$API_KEY" ]; then
    info "Preserved existing API key from server"
    return
  fi

  # Generate new one
  API_KEY=$(openssl rand -base64 32)
  warn "Generated new API key - save to 1Password!"
  echo "  API Key: $API_KEY"
}

pull_images() {
  log "Pulling Docker images..."
  ssh "${DEPLOY_USER}@${DEPLOY_HOST}" bash << 'ENDSSH'
cd ~/docker/link-radar/deploy
docker compose pull
ENDSSH

  log "Images pulled"
}

start_services() {
  log "Starting services..."
  ssh "${DEPLOY_USER}@${DEPLOY_HOST}" bash << 'ENDSSH'
cd ~/docker/link-radar/deploy
./bin/up
ENDSSH

  log "Waiting for services to become healthy..."
  sleep 15
}

################################################################################
# Update Mode Functions
################################################################################

update_deployment() {
  log "Starting update to ${DEPLOY_HOST}..."
  echo ""

  update_code
  pull_images
  restart_services
}

update_code() {
  log "Updating code on server..."
  ssh "${DEPLOY_USER}@${DEPLOY_HOST}" bash << 'ENDSSH'
set -e
cd ~/docker/link-radar
git fetch origin
git reset --hard origin/master
echo "Code updated to latest commit"
ENDSSH

  log "Code updated"
}

restart_services() {
  log "Restarting services..."
  ssh "${DEPLOY_USER}@${DEPLOY_HOST}" bash << 'ENDSSH'
cd ~/docker/link-radar/deploy
docker compose up -d
ENDSSH

  log "Waiting for services to become healthy..."
  sleep 15
}

################################################################################
# Shared Functions
################################################################################

verify_deployment() {
  log "Verifying deployment..."

  # Check container status
  info "Checking container status..."
  ssh "${DEPLOY_USER}@${DEPLOY_HOST}" bash << 'ENDSSH'
cd ~/docker/link-radar/deploy
docker compose ps
ENDSSH

  # Test health endpoint (from inside container - port not exposed)
  info "Testing health endpoint..."
  if ssh "${DEPLOY_USER}@${DEPLOY_HOST}" "docker exec linkradar-backend curl -f http://localhost:3000/up" &>/dev/null; then
    log "Health check passed!"
  else
    warn "Health check failed - backend may still be starting..."
  fi

  # Test database connection
  info "Testing database connection..."
  if ssh "${DEPLOY_USER}@${DEPLOY_HOST}" "docker exec linkradar-backend bin/rails runner 'Link.count'" &>/dev/null; then
    log "Database connection verified"
  else
    warn "Database check failed - backend may still be starting..."
  fi
}

mark_as_deployed() {
  if [ "$DEPLOYED" != "true" ]; then
    # Update local config file
    if [[ "$OSTYPE" == "darwin"* ]]; then
      sed -i '' 's/DEPLOYED=false/DEPLOYED=true/' "$CONFIG_FILE"
    else
      sed -i 's/DEPLOYED=false/DEPLOYED=true/' "$CONFIG_FILE"
    fi
    log "Marked as deployed in .config/${DEPLOY_ENV}.env"
    warn "Future deploys will use update mode (faster, preserves config)"
  fi
}

################################################################################
# Main Orchestration
################################################################################

main() {
  parse_arguments "$@"
  load_environment_config
  load_credentials
  check_prerequisites

  if [ "$DEPLOYED" == "true" ]; then
    info "Update mode: pulling latest and restarting"
    update_deployment
  else
    info "Install mode: full deployment"
    install_deployment
    mark_as_deployed
  fi

  verify_deployment

  echo ""
  log "🎉 Deployment complete!"
  echo ""
  echo "Your Link Radar backend is running on ${DEPLOY_HOST}"
  echo ""
  echo "Next steps:"
  echo "  - View logs: ssh ${DEPLOY_USER}@${DEPLOY_HOST} 'cd ~/docker/link-radar/deploy && ./bin/logs'"
  echo "  - Check status: ssh ${DEPLOY_USER}@${DEPLOY_HOST} 'cd ~/docker/link-radar/deploy && docker compose ps'"
  echo "  - Rails console: ssh ${DEPLOY_USER}@${DEPLOY_HOST} 'cd ~/docker/link-radar/deploy && ./bin/console'"
  if [ "$DEPLOYED" != "true" ]; then
    echo ""
    warn "Save credentials to 1Password if not already saved!"
  fi
  echo ""
}

################################################################################
# Script Execution
################################################################################

main "$@"
