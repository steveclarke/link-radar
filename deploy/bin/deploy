#!/usr/bin/env bash

set -e

# Link Radar Production Deployment Script
# Automates deployment to a remote server via SSH

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${GREEN}==>${NC} ${1}"; }
info() { echo -e "${BLUE}Info:${NC} ${1}"; }
warn() { echo -e "${YELLOW}Warning:${NC} ${1}"; }
error() { echo -e "${RED}Error:${NC} ${1}" >&2; exit 1; }

# Usage
usage() {
  cat << EOF
Usage: bin/deploy ENVIRONMENT [OPTIONS]

Automated deployment of Link Radar to a remote server.

Arguments:
  ENVIRONMENT          Environment name (required: prod, staging, test, etc.)
                      Loads .config/ENVIRONMENT.env

Configuration File (.config/ENV.env):
  DEPLOY_HOST           Server hostname or IP
  ONEPASSWORD_ITEM_ID   1Password item ID containing credentials

Credentials (auto-sourced from 1Password if available):
  - username (from 1Password, defaults to "deploy")
  - Database Password (from 1Password, required for first deploy only)
  - Rails Master Key (from backend/config/master.key)

Optional Environment Variables (can override auto-sourced values):
  DEPLOY_USER          SSH user
  RAILS_MASTER_KEY     Rails master key
  DB_PASSWORD          PostgreSQL password
  BACKEND_IMAGE        Backend image (default: ghcr.io/steveclarke/lr-backend:latest)
  BACKEND_PORT         Backend port (default: 3000)

Options:
  -h, --help          Show this help message
  -c, --check         Check prerequisites only, don't deploy

Examples:
  bin/deploy prod               # Deploy to production
  bin/deploy staging            # Deploy to staging
  bin/deploy test               # Deploy to test server
  bin/deploy myenv --check      # Check prerequisites for custom environment

EOF
  exit 0
}

# Parse environment argument (required)
if [ "$1" == "-h" ] || [ "$1" == "--help" ] || [ -z "$1" ]; then
  usage
fi

DEPLOY_ENV="$1"
shift

# Load environment config
CONFIG_FILE="$(dirname "$0")/../.config/${DEPLOY_ENV}.env"
if [ ! -f "$CONFIG_FILE" ]; then
  error "Config not found: .config/${DEPLOY_ENV}.env

Create from template:
  cp .config/environment.env.template .config/${DEPLOY_ENV}.env"
fi

source "$CONFIG_FILE"
info "Environment: ${DEPLOY_ENV}"

# Parse remaining arguments
CHECK_ONLY=false
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help) usage ;;
    -c|--check) CHECK_ONLY=true; shift ;;
    *) error "Unknown option: $1" ;;
  esac
done

# Warn if 1Password CLI is not available but config expects it
if [ -n "$ONEPASSWORD_ITEM_ID" ] && ! command -v op &> /dev/null; then
  warn "1Password CLI not found - install it or set credentials via environment variables"
  warn "Install: https://developer.1password.com/docs/cli/get-started/"
fi

# Auto-fetch credentials from 1Password
if command -v op &> /dev/null && [ -n "$ONEPASSWORD_ITEM_ID" ]; then
  if op item get "$ONEPASSWORD_ITEM_ID" &> /dev/null 2>&1; then
    info "Loading credentials from 1Password..."

    export DEPLOY_USER="${DEPLOY_USER:-$(op item get "$ONEPASSWORD_ITEM_ID" --fields label="username" 2>/dev/null || echo "deploy")}"
    export RAILS_MASTER_KEY="${RAILS_MASTER_KEY:-$(cat "$(dirname "$0")/../../backend/config/master.key" 2>/dev/null)}"
    export DB_PASSWORD="${DB_PASSWORD:-$(op item get "$ONEPASSWORD_ITEM_ID" --fields label="Database Password" --reveal 2>/dev/null)}"

    log "Credentials loaded from 1Password"
  fi
fi

export DEPLOY_USER="${DEPLOY_USER:-deploy}"

# Check prerequisites
log "Checking prerequisites..."

# Required variables
[[ -z "${DEPLOY_HOST}" ]] && error "DEPLOY_HOST not set"
[[ -z "${RAILS_MASTER_KEY}" ]] && error "RAILS_MASTER_KEY not set"

# Optional with defaults
BACKEND_IMAGE="${BACKEND_IMAGE:-ghcr.io/steveclarke/lr-backend:latest}"
BACKEND_PORT="${BACKEND_PORT:-3000}"

info "Deploy host: ${DEPLOY_HOST}"
info "Deploy user: ${DEPLOY_USER}"
info "Backend image: ${BACKEND_IMAGE}"

# Test SSH connection
log "Testing SSH connection..."
if ! ssh -o ConnectTimeout=5 -o BatchMode=yes "${DEPLOY_USER}@${DEPLOY_HOST}" "echo 'SSH OK'" &>/dev/null; then
  error "Cannot connect to ${DEPLOY_USER}@${DEPLOY_HOST}. Check SSH access."
fi
log "SSH connection successful"

# Check if postgres volume exists (DB_PASSWORD only needed for first deploy)
if ssh "${DEPLOY_USER}@${DEPLOY_HOST}" "docker volume ls 2>/dev/null | grep -q postgres_data"; then
  info "PostgreSQL volume exists, skipping DB_PASSWORD requirement"
  DB_PASSWORD_REQUIRED=false
else
  info "First deploy detected, DB_PASSWORD required"
  if [ -z "$DB_PASSWORD" ]; then
    DB_PASSWORD=$(openssl rand -base64 32)
    warn "Generated new DB_PASSWORD - save to 1Password!"
    echo ""
    echo "  Database Password: $DB_PASSWORD"
    echo ""
    warn "Add this to your 1Password item: $ONEPASSWORD_ITEM_ID"
  fi
  DB_PASSWORD_REQUIRED=true
fi

if [ "$CHECK_ONLY" = true ]; then
  log "Prerequisites check passed!"
  exit 0
fi

# Start deployment
log "Starting deployment to ${DEPLOY_HOST}..."
echo ""

# Step 1: Clone repository with sparse checkout
log "Step 1/7: Setting up deploy directory on server..."
ssh "${DEPLOY_USER}@${DEPLOY_HOST}" bash << 'ENDSSH'
set -e
mkdir -p ~/docker
cd ~/docker

# Clone if not exists, otherwise update
if [ ! -d "link-radar" ]; then
  echo "Cloning repository..."
  git clone --filter=blob:none --sparse https://github.com/steveclarke/link-radar.git
  cd link-radar
  git sparse-checkout set deploy
else
  echo "Updating existing repository..."
  cd link-radar
  git fetch origin
  git reset --hard origin/master
fi

cd deploy
echo "Deploy directory ready: $(pwd)"
ENDSSH

# Step 2: Run setup script
log "Step 2/7: Running setup script..."
ssh "${DEPLOY_USER}@${DEPLOY_HOST}" bash << 'ENDSSH'
cd ~/docker/link-radar/deploy
./bin/setup
ENDSSH

# Step 3: Configure environment files
log "Step 3/7: Configuring environment files..."

# Create .env
ssh "${DEPLOY_USER}@${DEPLOY_HOST}" "cat > ~/docker/link-radar/deploy/.env" << EOF
# Link Radar Production Deployment Configuration
# Generated by automated deployment script

# Backend Docker Image
BACKEND_IMAGE=${BACKEND_IMAGE}

# Backend Port (external port mapping)
BACKEND_PORT=${BACKEND_PORT}
EOF

# Create backend.env
# URL-encode the password for use in DATABASE_URL
DB_PASSWORD_ENCODED=$(printf '%s' "${DB_PASSWORD}" | jq -sRr @uri)

ssh "${DEPLOY_USER}@${DEPLOY_HOST}" "cat > ~/docker/link-radar/deploy/env/backend.env" << EOF
# Link Radar Backend Configuration
# Generated by automated deployment script

# Rails Environment
RAILS_ENV=production
RAILS_LOG_LEVEL=info
RAILS_SERVE_STATIC_FILES=true

# Rails Master Key
RAILS_MASTER_KEY=${RAILS_MASTER_KEY}

# Database Configuration
DATABASE_URL=postgresql://linkradar:${DB_PASSWORD_ENCODED}@postgres:5432/linkradar_production

# Redis Configuration
REDIS_URL=redis://redis:6379/0

# Optional: Database connection pool size
RAILS_MAX_THREADS=5
EOF

# Create postgres.env
ssh "${DEPLOY_USER}@${DEPLOY_HOST}" "cat > ~/docker/link-radar/deploy/env/postgres.env" << EOF
# PostgreSQL Database Configuration
# Generated by automated deployment script

POSTGRES_USER=linkradar
POSTGRES_PASSWORD=${DB_PASSWORD}
POSTGRES_DB=linkradar_production
EOF

log "Environment files configured"

# Step 4: Pull images (GHCR auth not needed - repo is public)
log "Step 4/6: Pulling Docker images..."
ssh "${DEPLOY_USER}@${DEPLOY_HOST}" bash << 'ENDSSH'
cd ~/docker/link-radar/deploy
docker compose pull
ENDSSH

# Step 5: Start services
log "Step 5/6: Starting services..."
ssh "${DEPLOY_USER}@${DEPLOY_HOST}" bash << 'ENDSSH'
cd ~/docker/link-radar/deploy
./bin/up
ENDSSH

# Wait for services to be healthy
log "Waiting for services to become healthy..."
sleep 10

# Step 6: Verify deployment
log "Step 6/6: Verifying deployment..."

# Check container status
info "Checking container status..."
ssh "${DEPLOY_USER}@${DEPLOY_HOST}" bash << 'ENDSSH'
cd ~/docker/link-radar/deploy
docker compose ps
ENDSSH

# Test health endpoint
info "Testing health endpoint..."
if ssh "${DEPLOY_USER}@${DEPLOY_HOST}" "curl -f http://localhost:${BACKEND_PORT}/up" &>/dev/null; then
  log "Health check passed!"
else
  warn "Health check failed, but services may still be starting..."
fi

# Test database connection
info "Testing database connection..."
ssh "${DEPLOY_USER}@${DEPLOY_HOST}" bash << 'ENDSSH'
cd ~/docker/link-radar/deploy
./bin/runner bin/rails runner "puts 'DB: ' + (ActiveRecord::Base.connection.active? ? 'Connected' : 'Failed')"
ENDSSH

echo ""
log "ðŸŽ‰ Deployment complete!"
echo ""
echo "Your Link Radar backend is now running on ${DEPLOY_HOST}"
echo ""
echo "Next steps:"
echo "  - View logs: ssh ${DEPLOY_USER}@${DEPLOY_HOST} 'cd ~/docker/link-radar/deploy && ./bin/logs'"
echo "  - Check status: ssh ${DEPLOY_USER}@${DEPLOY_HOST} 'cd ~/docker/link-radar/deploy && docker compose ps'"
echo "  - Rails console: ssh ${DEPLOY_USER}@${DEPLOY_HOST} 'cd ~/docker/link-radar/deploy && ./bin/console'"
echo "  - Test: curl http://${DEPLOY_HOST}:${BACKEND_PORT}/up"
echo ""

