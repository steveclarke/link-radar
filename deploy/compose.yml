name: "linkradar"

services:
  backend:
    image: ${BACKEND_IMAGE}
    container_name: linkradar-backend
    env_file:
      - env/backend.env
    # Port exposure handled by Caddy reverse proxy
    # Uncomment for direct access: ports: ["${BACKEND_PORT:-3000}:3000"]
    networks:
      - default      # For postgres/redis
      - caddy_net    # For Caddy reverse proxy
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/up || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  runner:
    image: ${BACKEND_IMAGE}
    container_name: linkradar-runner
    env_file:
      - env/backend.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    command: ["bin/true"]
    restart: "no"
    profiles:
      - tools

  postgres:
    image: postgres:18
    container_name: linkradar-postgres
    env_file:
      - env/postgres.env
    volumes:
      - postgres_data:/var/lib/postgresql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-linkradar} -d ${POSTGRES_DB:-linkradar_production}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: linkradar-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
    name: linkradar_postgres_data
  redis_data:
    name: linkradar_redis_data

networks:
  default:
    driver: bridge
  caddy_net:
    external: true
    name: caddy_net

