#!/usr/bin/env ruby
require "fileutils"
require "io/console"

APP_ROOT = File.expand_path("..", __dir__)
APP_NAME = "link-radar"

def system!(*args)
  system(*args, exception: true)
end

def postgres_running?
  system("docker compose ps -q postgres 2>/dev/null | grep -q .")
end

def has_apt?
  File.exist?("/etc/lsb-release") || File.exist?("/etc/debian_version")
end

def has_macos?
  RbConfig::CONFIG["host_os"].downcase.include?("darwin")
end

def apt_package_installed?(pkg)
  # Don't show output. We just want the return value to see if it is installed.
  system("dpkg -s #{pkg}", %i[out err] => File::NULL)
end

def gem_installed?(gem)
  # Don't show output. We just want the return value to see if it is installed.
  system("gem list -i #{gem}", %i[out err] => File::NULL)
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "== Checking for PostgreSQL service =="
  if postgres_running?
    puts "PostgreSQL service is running."
  else
    puts "\nPostgreSQL service is not running."
    puts "Please run 'bin/services' in another terminal first, then run this script again."
    exit 1
  end

  puts "== Installing dependencies =="
  system("bundle check") || system!("bundle install")

  puts "\n== Copying sample files =="
  unless File.exist?(".env")
    FileUtils.cp ".env.sample", ".env"
  end

  puts "== Checking for Rails credential keys =="
  unless File.exist?("#{APP_ROOT}/config/master.key")
    print "Enter your master.key: "
    key = $stdin.noecho(&:gets).chomp
    system! "echo \"#{key}\" > #{APP_ROOT}/config/master.key"
  end

  # Install Ubuntu package dependencies.
  if has_apt?
    unless apt_package_installed?("libvips-dev")
      system!("sudo apt install -y libvips-dev")
    end
    system!("sudo apt install -y ffmpeg") unless apt_package_installed?("ffmpeg")
  end

  if has_macos?
    unless system("brew list | grep -q vips")
      system! "brew install vips"
    end
    system! "brew install ffmpeg" unless system("brew list | grep -q ffmpeg")
  end

  puts "\n== Preparing database =="
  system! "bin/rails db:prepare"
  system! "bin/rails db:reset" if ARGV.include?("--reset")

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  unless ARGV.include?("--skip-server")
    puts "\n== Starting development server =="
    $stdout.flush # flush the output before exec(2) so that it displays
    exec "bin/dev"
  end
end
