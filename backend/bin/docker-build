#!/usr/bin/env bash
set -euo pipefail

################################################################################
# Docker Build Script
################################################################################
#
# OVERVIEW
# --------
# Builds Link Radar backend Docker image for deployment.
#
# USAGE
# -----
#   bin/docker-build                # Build for linux/amd64 (production)
#   bin/docker-build --local        # Build for local platform (faster)
#   bin/docker-build -- --no-cache  # Pass extra args to Docker
#
# CONFIGURATION
# -------------
# Defaults to linux/amd64 using buildx for production deployment.
# Use --local flag for faster local-only builds (Mac ARM or Linux dev).
#
################################################################################

script_dir=$(cd "$(dirname "$0")" && pwd)
source "${script_dir}/docker-config.sh"

# Build options
LOCAL_BUILD=false
EXTRA_ARGS=()

################################################################################
# Core Functions
################################################################################

parse_build_options() {
  # Check for --local flag
  if [ "${1:-}" == "--local" ]; then
    LOCAL_BUILD=true
    shift
  fi
  
  # Parse -- separator for extra docker args
  while [ "${1:-}" != "--" ] && [ -n "${1:-}" ]; do
    shift || break
  done
  
  # Remove the -- and capture remaining args
  if [ "${1:-}" == "--" ]; then
    shift
    EXTRA_ARGS=("$@")
  fi
}

load_version() {
  get_version "${script_dir}"
}

build_image() {
  local image_tag="${IMAGE_NAME}:${version}"
  local build_context
  build_context=$(get_build_context "${script_dir}")
  
  log "Building ${image_tag}"
  info "Build context: ${build_context}"
  
  cd "${build_context}"
  
  if [ "$LOCAL_BUILD" = true ]; then
    info "Building for local platform (faster, but won't work on linux/amd64 servers)"
    docker build -t "${image_tag}" "${EXTRA_ARGS[@]}" .
  else
    info "Building for ${DEFAULT_PLATFORM} (production-ready)"
    docker buildx build --platform "${DEFAULT_PLATFORM}" --load -t "${image_tag}" "${EXTRA_ARGS[@]}" .
  fi
  
  log "Build complete!"
  info "Image: ${image_tag}"
}

show_next_steps() {
  local image_tag="${IMAGE_NAME}:${version}"
  
  echo ""
  echo "Next steps:"
  echo "  - Test the image: docker run --rm ${image_tag} bin/rails --version"
  echo "  - Push to registry: bin/docker-push"
  echo ""
}

################################################################################
# Main Orchestration
################################################################################

main() {
  parse_build_options "$@"
  load_version
  build_image
  show_next_steps
}

################################################################################
# Script Execution
################################################################################

main "$@"
